#!/usr/bin/env bash
set -euo pipefail

log() { echo "[startup] $*"; }

METABASE_DIR=/opt/metabase
ASSETS_DIR=/tmp/metabase-assets
SYSTEMD_DIR=/etc/systemd/system

md() { curl -s -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/$1"; }
meta_attr() { md "instance/attributes/$1" || true; }
project_id() { md "project/project-id"; }

# Get an access token for the VM's default SA
access_token() {
  curl -s -H "Metadata-Flavor: Google" \
    "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" \
    | jq -r .access_token
}

# Access Secret Manager secret by name; prints decoded payload
secret_val() {
  local name="$1"
  local token
  token=$(access_token)
  local pid
  pid=$(project_id)
  curl -s -H "Authorization: Bearer ${token}" \
    "https://secretmanager.googleapis.com/v1/projects/${pid}/secrets/${name}/versions/latest:access" \
    | jq -r '.payload.data' | base64 -d 2>/dev/null || true
}

install_packages() {
  log "Installing Docker and helpers"
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  apt-get install -y docker.io docker-compose-plugin jq curl ca-certificates
  systemctl enable --now docker
}

prepare_dirs() {
  log "Preparing directories"
  mkdir -p "$METABASE_DIR" /opt/metabase/backups
}

render_env() {
  log "Rendering /opt/metabase/metabase.env from metadata + secrets"
  local pid bq_project bq_dataset bq_sa site_url bucket
  pid=$(project_id)
  site_url=$(meta_attr metabase-site-url)
  bucket=$(meta_attr metabase-backup-bucket)

  # Secret names from metadata
  local s_proj s_ds s_sa
  s_proj=$(meta_attr metabase-bq-project-secret)
  s_ds=$(meta_attr metabase-bq-dataset-secret)
  s_sa=$(meta_attr metabase-bq-service-account-secret)

  # Resolve secret values (fallback to empty)
  bq_project=$(secret_val "$s_proj")
  bq_dataset=$(secret_val "$s_ds")
  bq_sa=$(secret_val "$s_sa")

  # App DB creds and encryption
  local db_pass enc_key admin_email admin_pass
  db_pass=$(secret_val metabase-db-password)
  enc_key=$(secret_val metabase-encryption-key)
  admin_email=$(secret_val metabase-admin-email)
  admin_pass=$(secret_val metabase-admin-password)

  # Fallbacks if secrets missing
  [[ -z "$db_pass" ]] && db_pass=$(head -c 32 /dev/urandom | base64 | tr -dc 'A-Za-z0-9' | head -c 24)
  [[ -z "$enc_key" ]] && enc_key=$(head -c 48 /dev/urandom | base64 | tr -dc 'A-Za-z0-9' | head -c 32)

  cat >"$METABASE_DIR/metabase.env" <<EOF
# Autogenerated by startup.sh
MB_SITE_URL=${site_url}
MB_CREATE_SAMPLE_DATA=false

MB_DB_TYPE=postgres
MB_DB_DBNAME=metabase
MB_DB_USER=metabase_app
MB_DB_PASS=${db_pass}
MB_DB_HOST=metabase-db
MB_DB_PORT=5432

MB_ENCRYPTION_SECRET=${enc_key}

MB_BIGQUERY_PROJECT_ID=${bq_project}
MB_BIGQUERY_DATASET=${bq_dataset}
MB_BIGQUERY_SERVICE_ACCOUNT=${bq_sa}

MB_BACKUP_BUCKET=${bucket}
LOG_LEVEL=INFO
EOF
}

install_units() {
  log "Installing systemd units"
  cat >"$SYSTEMD_DIR/metabase.service" <<'UNIT'
[Unit]
Description=Metabase (Docker Compose)
After=docker.service
Requires=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/docker compose -f /opt/metabase/docker-compose.yml up -d
ExecStop=/usr/bin/docker compose -f /opt/metabase/docker-compose.yml down
User=root
WorkingDirectory=/opt/metabase

[Install]
WantedBy=multi-user.target
UNIT

  cat >"$SYSTEMD_DIR/metabase-backup.service" <<'UNIT'
[Unit]
Description=Metabase Postgres backup
After=docker.service
Requires=docker.service

[Service]
Type=oneshot
EnvironmentFile=/opt/metabase/metabase.env
ExecStart=/opt/metabase/backup-metabase.sh
UNIT

  cat >"$SYSTEMD_DIR/metabase-backup.timer" <<'UNIT'
[Unit]
Description=Daily Metabase backup at 03:00 UTC

[Timer]
OnCalendar=*-*-* 03:00:00
Persistent=true

[Install]
WantedBy=timers.target
UNIT

  systemctl daemon-reload
  systemctl enable metabase.service metabase-backup.timer
}

sync_assets() {
  log "Syncing compose and backup script"
  cp -f "$ASSETS_DIR/docker-compose.yml" "$METABASE_DIR/docker-compose.yml"
  cp -f "$ASSETS_DIR/backup-metabase.sh" "$METABASE_DIR/backup-metabase.sh"
  chmod +x "$METABASE_DIR/backup-metabase.sh"
}

start_services() {
  log "Starting Metabase service"
  systemctl start metabase.service
  systemctl start metabase-backup.timer || true
}

main() {
  install_packages
  prepare_dirs
  render_env
  sync_assets
  install_units
  start_services
  log "Done. Visit http://<VM-EXTERNAL-IP>:3000"
}

main "$@"
